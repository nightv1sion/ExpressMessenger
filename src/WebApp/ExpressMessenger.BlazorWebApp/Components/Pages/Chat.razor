@page "/chats/{chatId:guid}"
@using ExpressMessenger.BlazorWebApp.Authentication
@using ExpressMessenger.BlazorWebApp.Notifications
@using ExpressMessenger.SharedKernel.ApiContracts.Chatting
@using ExpressMessenger.SharedKernel.ApiContracts.Chatting.GetChat
@using ExpressMessenger.SharedKernel.ApiContracts.Chatting.SendMessage
@using ExpressMessenger.BlazorWebApp.Components.Chats
@inject ITokenManager TokenManager;
@inject IChatApi ChatApi
@inject IJSRuntime JsRuntime
@inject ChattingSignalRService ChattingSignalRService

<div class="container" @key='$"{_chatId}{_chatVersion}"'>
    <div class="row">
        <div class="col">
            <div class="card">
                <div class="card-header bg-primary text-white text-center">
                    @ChatName
                </div>
                <ChatMessageList Messages="_messages"/>
                <div class="card-footer">
                    <div class="input-group">
                        <input type="text" class="form-control" @bind="_newMessage" placeholder="Напишите сообщение" />
                        <button class="btn btn-primary" @onclick="SendMessage">Отправить</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private GetChatResponse.ChatModel? _chat;
    private IReadOnlyCollection<GetChatResponse.ChatModel.MessageModel> _messages = [];
    private string _newMessage = string.Empty; 
    private string ChatName => string.Join(
        ", ",
        _chat?.Companions.Select(companion => companion.UserNames) ?? Array.Empty<string>());

    private int _chatVersion;
    private Guid _chatId;
    
    [Parameter]
    public Guid ChatId
    {
        get => _chatId;
        set
        {
            if (_chatId == value)
            {
                return;
            }
            
            _ = LoadChat(value);
            _chatId = value;
        }
    }
    
    private async Task LoadChat(Guid chatId)
    {
        string accessToken = await TokenManager.GetBearerAccessToken();
        GetChatResponse response = await ChatApi.GetChat(accessToken, chatId);
        _chat = response.Chat;
        _messages = _chat.Messages;
        _chatVersion++;
        StateHasChanged();
        await JsRuntime.InvokeVoidAsync("scrollToBottom", "chat-container");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
        {
            return;
        }
        
        await ChattingSignalRService.ListenNewMessageReceived(OnNewMessageReceived);
    }

    private async Task OnNewMessageReceived(string chatId)
    {
        if (chatId != ChatId.ToString())
        {
            return;
        }

        await InvokeAsync(async () =>
        {
            await LoadChat(ChatId);
        });
    }

    private async Task SendMessage()
    {
        if (string.IsNullOrWhiteSpace(_newMessage))
        {
            return;
        }

        string accessToken = await TokenManager.GetBearerAccessToken();

        await ChatApi.SendMessage(
            ChatId,
            new SendMessageRequest(_newMessage),
            accessToken);
        
        _newMessage = string.Empty;
        await LoadChat(ChatId);
        await JsRuntime.InvokeVoidAsync("scrollToBottom", "chat-container");
    }
}