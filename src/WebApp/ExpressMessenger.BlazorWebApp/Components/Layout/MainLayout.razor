@using ExpressMessenger.BlazorWebApp.Authentication
@using ExpressMessenger.SharedKernel.ApiContracts.Chatting
@using ExpressMessenger.SharedKernel.ApiContracts.Chatting.GetChats
@using ExpressMessenger.SharedKernel.ApiContracts.UsersManagement.Users
@using ExpressMessenger.SharedKernel.ApiContracts.UsersManagement.Users.GetUser
@using ExpressMessenger.BlazorWebApp.Notifications
@inherits LayoutComponentBase
@inject ITokenManager TokenManager;
@inject IUsersApi UsersApi;
@inject IChatApi ChatApi;
@inject ChattingSignalRService ChattingSignalRService;

<BlazorBootstrapLayout HeaderSectionCssClass="d-flex justify-content-between">
    <HeaderSection>
            <div>
                @(string.IsNullOrEmpty(_userName) ? "" : $"Ваше имя пользователя: {_userName}")
            </div>
            <div>
                <ThemeSwitcher Class="ps-3 ps-lg-2" Position="DropdownMenuPosition.End"/>
            </div>
    </HeaderSection>

    <SidebarSection>
        <Sidebar2 Href="/"
                  ImageSrc="https://demos.blazorbootstrap.com/images/logo/logo-white.svg"
                  Title="ExpressMessenger"
                  BadgeText="1.0.0"
                  DataProvider="Sidebar2DataProvider"
                  WidthUnit="Unit.Px"
                  @key="_chatsVersion"/>
    </SidebarSection>
    
    <ContentSection>
        @Body
    </ContentSection>

</BlazorBootstrapLayout>

@code {
    private IReadOnlyCollection<GetChatsResponse.ChatModel> _chats = [];
    private string? _userName;
    private int _chatsVersion = 0;
    

    private Task<Sidebar2DataProviderResult> Sidebar2DataProvider(Sidebar2DataProviderRequest request)
    {
        return Task.FromResult(new Sidebar2DataProviderResult
        {
            Data = _chats
                .Select(x => new NavItem
                {
                    Id = x.ChatId.ToString(),
                    Href = $"/chats/{x.ChatId}",
                    IconName = IconName.Messenger,
                    Text = string.Join(", ", x.Companions.Select(companion => companion.UserName)),
                })
                .ToArray()
        });
    }

    private async Task LoadChats()
    {
        (bool success, string? accessToken) = await TokenManager.GetAccessToken();

        if (!success || accessToken is null)
        {
            return;
        }
        
        var response = await ChatApi.GetChats(TokenManager.ToBearer(accessToken));
        _chats = response.Chats;
        _chatsVersion++;
        
        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
        {
            return;
        }
        
        (bool success, string? accessToken) = await TokenManager.GetAccessToken();

        if (!success || accessToken is null)
        {
            return;
        }

        GetUserResponse response = await UsersApi.GetUser(TokenManager.ToBearer(accessToken));
        _userName = response.UserName;
        
        // await ChattingSignalRService.StartConnectionAsync();
        await ChattingSignalRService.ListenNewChatCreated(OnNewChatCreated);
        
        await LoadChats();
    }

    public async Task OnNewChatCreated()
    {
        await InvokeAsync(async () =>
        {
            await LoadChats();
        });
    }
}
