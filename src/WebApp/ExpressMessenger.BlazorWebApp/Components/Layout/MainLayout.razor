@using ExpressMessenger.BlazorWebApp.Apis.UsersManagement
@using ExpressMessenger.BlazorWebApp.Authentication
@using ExpressMessenger.SharedKernel.ApiContracts.UsersManagement.GetUser
@using ExpressMessenger.SharedKernel.ApiContracts.UsersManagement.RegisterUser
@inherits LayoutComponentBase
@inject IAuthenticationApi AuthenticationApi
@inject ITokenManager TokenManager;
@inject IUsersApi UsersApi;

<BlazorBootstrapLayout HeaderSectionCssClass="d-flex justify-content-between">
    <HeaderSection>
            <div>
                @(userId.HasValue ? $"Ваш идентификатор: {userId.Value}" : "UserId: Something went wrong")
            </div>
            <div>
                <ThemeSwitcher Class="ps-3 ps-lg-2" Position="DropdownMenuPosition.End"/>
            </div>
    </HeaderSection>

    <SidebarSection>
        <Sidebar2 Href="/"
                  ImageSrc="https://demos.blazorbootstrap.com/images/logo/logo-white.svg"
                  Title="ExpressMessenger"
                  BadgeText="1.0.0"
                  DataProvider="Sidebar2DataProvider"
                  WidthUnit="Unit.Px" />
    </SidebarSection>

    <ContentSection>
        @Body
    </ContentSection>

</BlazorBootstrapLayout>

@code {
    private IEnumerable<NavItem> navItems = default!;
    private Guid? userId = null;

    private async Task<Sidebar2DataProviderResult> Sidebar2DataProvider(Sidebar2DataProviderRequest request)
    {
        if (navItems is null)
        {
            navItems = GetNavItems();
        }

        return await Task.FromResult(request.ApplyTo(navItems));
    }

    private IEnumerable<NavItem> GetNavItems()
    {
        navItems = new List<NavItem>
        {
            new() { Id = "1", Href = "/", IconName = IconName.HouseDoorFill, Text = "Home", Match = NavLinkMatch.All },
            new() { Id = "2", Href = "/counter", IconName = IconName.PlusSquareFill, Text = "Counter" },
            new() { Id = "3", Href = "/weather", IconName = IconName.Table, Text = "Weather" },
            new() { Id = "4", Href = "/messenger", IconName = IconName.Messenger, Text = "Messenger" },
        };

        return navItems;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
        {
            return;
        }
        
        (bool success, string? accessToken) = await TokenManager.GetAccessToken();
    
        if (success && accessToken is not null)
        {
            GetUserResponse response = await UsersApi.GetUser($"Bearer {accessToken}");
            userId = response.UserId;
        }
        else
        {
            RegisterUserResponse response = await AuthenticationApi.RegisterUser();
            userId = response.UserId;
            await TokenManager.SetToken(
                response.UserId,
                response.AccessToken,
                response.RefreshToken);
        }
        
        StateHasChanged();
    }
}

<div id="blazor-error-ui" data-nosnippet>
    An unhandled error has occurred.
    <a href="." class="reload">Reload</a>
    <span class="dismiss">🗙</span>
</div>
