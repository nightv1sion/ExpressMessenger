@using ExpressMessenger.BlazorWebApp.Authentication
@using ExpressMessenger.SharedKernel.ApiContracts.Chatting
@using ExpressMessenger.SharedKernel.ApiContracts.Chatting.GetChats
@using ExpressMessenger.SharedKernel.ApiContracts.UsersManagement.Users
@using ExpressMessenger.SharedKernel.ApiContracts.UsersManagement.Users.GetUser
@using ExpressMessenger.BlazorWebApp.Components.Pages
@inherits LayoutComponentBase
@inject ITokenManager TokenManager;
@inject IUsersApi UsersApi;
@inject IChatApi ChatApi;

<BlazorBootstrapLayout HeaderSectionCssClass="d-flex justify-content-between">
    <HeaderSection>
            <div>
                @(string.IsNullOrEmpty(_userName) ? "" : $"Ваше имя пользователя: {_userName}")
            </div>
            <div>
                <ThemeSwitcher Class="ps-3 ps-lg-2" Position="DropdownMenuPosition.End"/>
            </div>
    </HeaderSection>

    <SidebarSection>
        <Sidebar2 Href="/"
                  ImageSrc="https://demos.blazorbootstrap.com/images/logo/logo-white.svg"
                  Title="ExpressMessenger"
                  BadgeText="1.0.0"
                  DataProvider="Sidebar2DataProvider"
                  WidthUnit="Unit.Px" />
    </SidebarSection>
    
    <ContentSection>
        @Body
    </ContentSection>

</BlazorBootstrapLayout>

@code {
    private IReadOnlyCollection<GetChatsResponse.ChatModel>? _chats;
    private string? _userName;

    private async Task<Sidebar2DataProviderResult?> Sidebar2DataProvider(Sidebar2DataProviderRequest request)
    {
        if (_chats is null)
        {
            (bool success, string? accessToken) = await TokenManager.GetAccessToken();

            if (!success || accessToken is null)
            {
                return null;
            }
            
            var chats = await LoadChats(TokenManager.ToBearer(accessToken));
            _chats = chats.Chats;
        }

        return new Sidebar2DataProviderResult
        {
            Data = _chats
                .Select(x => new NavItem
                {
                    Id = x.ChatId.ToString(),
                    Href = $"/chats/{x.ChatId}",
                    IconName = IconName.Messenger,
                    Text = string.Join(", ", x.Companions.Select(companion => companion.UserName))
                })
                .ToArray()
        };
    }

    private async Task<GetChatsResponse> LoadChats(string bearerToken)
    {
        return await ChatApi.GetChats(bearerToken);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
        {
            return;
        }
        
        (bool success, string? accessToken) = await TokenManager.GetAccessToken();

        if (!success || accessToken is null)
        {
            return;
        }

        GetUserResponse response = await UsersApi.GetUser(TokenManager.ToBearer(accessToken));
        _userName = response.UserName;
        
        StateHasChanged();
    }
}
